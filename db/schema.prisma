// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")
  imageUrl       String?
  isPublic       Boolean  @default(false)
  cover          String?
  isActive       Boolean  @default(true)

  tokens        Token[]
  sessions      Session[]
  Catalog       Catalog[]
  Card          Card[]
  favorite      Favorite[]
  sharedCatalog SharedCatalog[]
  StudyPlan     StudyPlan[]
  learnSession  LearnSession[]
  quiz          Quiz[]
  suggestion    Suggestion[]
  apiKeys       ApiKey[]
}

model ApiKey {
  id        String   @id @default(uuid())
  key       String
  iv        String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Quiz {
  id        String   @id @default(uuid())
  userId    String
  catalogId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  catalog Catalog @relation(fields: [catalogId], references: [catalogId])
}

model Suggestion {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Session {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Catalog {
  catalogId       String   @id @default(uuid())
  name            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isShared        Boolean  @default(false)
  numberOfCards   Int
  amountOfDrawers String   @default("3")
  description     String?
  imageUrl        String?
  type            String

  owner         User            @relation(fields: [ownerId], references: [id])
  ownerId       String
  cards         Card[]
  drawers       Drawer[]
  favorites     Favorite[]
  sharedCatalog SharedCatalog[]
  StudyPlan     StudyPlan[]
  learnSession  LearnSession[]
  quizzes       Quiz[]
}

model SharedCatalog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  catalogId String   @default(uuid())
  userId    String   @default(uuid())
  catalog   Catalog  @relation(fields: [catalogId], references: [catalogId], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Card {
  cardId                String   @id @default(uuid())
  term                  String
  description           String?
  termTranslated        String
  descriptionTranslated String?
  imageUrl              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  catalogId String
  catalog   Catalog @relation(fields: [catalogId], references: [catalogId], onDelete: Cascade, onUpdate: Cascade)

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  drawerCards DrawerCard[]
  favorite    Favorite[]
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Frequency {
  DAILY
  EVERY2DAYS
  EVERY4DAYS
  WEEKLY
  EVERY2WEEKS
  MONTHLY
  EVERY2MONTHS
}

model Drawer {
  drawerId  String @id @default(uuid())
  catalogId String

  levelName     Level     @default(BEGINNER)
  frequency     Frequency @default(DAILY)
  numberOfCards Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  level         Int       @default(1)

  catalog      Catalog        @relation(fields: [catalogId], references: [catalogId], onDelete: Cascade, onUpdate: Cascade)
  drawerCards  DrawerCard[]
  learnSession LearnSession[]
}

model DrawerCard {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  drawerId  String   @default(uuid())
  cardId    String   @default(uuid())
  drawer    Drawer   @relation(fields: [drawerId], references: [drawerId], onDelete: Cascade, onUpdate: Cascade)
  card      Card     @relation(fields: [cardId], references: [cardId], onDelete: Cascade, onUpdate: Cascade)
}

enum FavoriteType {
  CARD
  CATALOG
}

model Favorite {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  favoriteType FavoriteType
  userId       String
  catalogId    String?
  cardId       String?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  catalog Catalog? @relation(fields: [catalogId], references: [catalogId], onDelete: Cascade)
  card    Card?    @relation(fields: [cardId], references: [cardId], onDelete: Cascade)

  @@unique([userId, catalogId, cardId])
}

model StudyPlan {
  id             String   @id @default(uuid())
  name           String
  daysPerWeek    Int      @default(7)
  secondsPerDay  Int      @default(900)
  wordsPerDay    Int      @default(4)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  completionDate DateTime
  catalogId      String
  color          String
  catalog        Catalog  @relation(fields: [catalogId], references: [catalogId], onDelete: Cascade, onUpdate: Cascade)
  ownerId        String
  owner          User     @relation(fields: [ownerId], references: [id])
  active         Boolean  @default(true)
}

model LearnSession {
  id           String    @id @default(uuid())
  userId       String
  catalogId    String
  drawerId     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  sessionStart DateTime  @default(now())
  sessionEnd   DateTime?
  learnedCards Int?      @default(0)
  active       Boolean   @default(true)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  catalog Catalog @relation(fields: [catalogId], references: [catalogId], onDelete: Cascade)
  drawer  Drawer? @relation(fields: [drawerId], references: [drawerId], onDelete: Cascade, onUpdate: Cascade)
}

// Next iteration
// planCard PlanCard[]

// tworzenie nowych szufladek przy udostÄ™pnianiu katalogu 
